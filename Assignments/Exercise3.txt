
JSX?

JSX (JavaScript XML) is an extension to JavaScript syntax that allows you to write HTML-like code within JavaScript. It is commonly used 
with React but can also be used with other frameworks or libraries.

JSX combines the power of JavaScript with the expressiveness of HTML, making it easier to describe and construct user interfaces. It provides 
a concise and intuitive way to define the structure and appearance of UI components.

Key features of JSX:

While JSX looks like HTML, it is not actually HTML. Under the hood, JSX code is transpiled into regular JavaScript code before it is executed 
in the browser. Tools like Babel are commonly used to transform JSX into valid JavaScript that the browser can understand.

React leverages JSX as its primary syntax for defining the structure and behavior of UI components. It allows developers to write declarative 
code, where the UI is expressed in terms of its desired state rather than manual DOM manipulation. JSX enhances the readability, reusability, 
and maintainability of React components.

-------------------------------------------------------------------------------------------------------------------------------------

React.createElement vs JSX?

React.createElement is a method provided by the React library that allows you to create React elements programmatically.
It takes three arguments: the type of the element (either a string for HTML elements or a custom React component), an optional object of props 
(properties), and the children of the element (nested elements or text content).

JSX is a syntax extension for JavaScript that allows you to write HTML-like code within JavaScript.
It provides a more declarative and intuitive way to define the structure and appearance of React components.

----------------------------------------------------------------------------------------------------

Superpowers of JSX=>

Declarative UI
Embedding JavaScript Expressions
Component Composition
Familiar HTML-like Syntax
Type Safety and Error Checking
Enhanced Tooling Support

These superpowers make JSX a powerful and expressive tool for building user interfaces in React. It combines the strengths of JavaScript 
and HTML-like syntax, enabling developers to create reusable, maintainable, and performant UI components with ease.

---------------------------------------------------------------------------------------------------------

{TitleComponent} vs {<TitleComponent/>} vs {<TitleComponent></TitleComponent>} in JSX

{TitleComponent}: This syntax is used to render the TitleComponent as a plain JavaScript expression. It does not create an instance of the 
component. It is commonly used when passing components as props or when assigning a component to a variable for later use. For example:

const MyComponent = () => {
  const Title = <h1>Hello, world!</h1>;
  return <div>{Title}</div>;
};
------------------------------------

{<TitleComponent/>}: This syntax is used to render the TitleComponent as a self-closing JSX tag. It creates an instance of the TitleComponent 
and renders it as a React element. It is the most common way to render components in JSX. For example:

const MyComponent = () => {
  return <div><TitleComponent/></div>;
};
------------------------------------

{<TitleComponent></TitleComponent>}: This syntax is used to render the TitleComponent as an opening and closing JSX tag. It also creates an 
instance of the TitleComponent and renders it as a React element. It is less common compared to the self-closing tag syntax, but it can be 
useful when you need to include child elements within the component tags. For example:

const MyComponent = () => {
  return <div><TitleComponent><span>Subtitle</span></TitleComponent></div>;
};
------------------------------------------------------------------------------------------------------------------------------

CODE ASSIGNMENTS:

Create a Nested header Element using React.createElement(h1, h2, h3 inside a div with class "title") 

const element = React.createElement(
  'div',
  { className: 'title' },
  React.createElement('h1', null, 'Heading 1'),
  React.createElement('h2', null, 'Heading 2'),
  React.createElement('h3', null, 'Heading 3')
);
------------------------------------------------
Create the same element using JSX

const element = (
  <div className="title">
    <h1>Heading 1</h1>
    <h2>Heading 2</h2>
    <h3>Heading 3</h3>
  </div>
);
------------------------------------------------
Create a functional component of the same with JSX

import React from 'react';

const NestedHeader = () => {
	return (
		<div className="title">
			<h1>Heading 1</h1>
			<h2>Heading 2</h2>
			<h3>Heading 3</h3>
		</div>
	);
};

export default NestedHeader;
-------------------------------------------------
Pass attributes into the tag in JSX 

import React from 'react';

const MyComponent = () => {
	const name = "vivek";
	const age = 24;
	
	return (
		<div>
			<h1>Hello, {name}!</h1>
			<p>Age: {age}</p>
			<img src="image.jpg" alt="Example" />
		</div>
	);
};
--------------------------------------------------
Composition of Component(Add a component inside another)

import React from 'react';

// ChildComponent
const ChildComponent = () => {
  return <p>This is the ChildComponent</p>;
};

// ParentComponent
const ParentComponent = () => {
  return (
    <div>
      <h1>ParentComponent</h1>
      <ChildComponent />
    </div>
  );
};

export default ParentComponent;
-----------------------------------------------------
Create a Header Component from scratch using Functional Components with JSX
• Add a Logo on left
• Add a search bar in middle
• Add User icon on right
• Add CSS to make it look nice
---------------------------------------
//Header.js 

import React from 'react';
import './Header.css';

const Header = () => {
  return (
    <header className="header">
      <div className="header-logo">
        <img src="logo.png" alt="Logo" />
      </div>
      <div className="header-search">
        <input type="text" placeholder="Search" />
      </div>
      <div className="header-user">
        <img src="user-icon.png" alt="User" />
      </div>
    </header>
  );
};

export default Header;

------------------------------------------
//App.js:

import React from 'react';
import Header from './Header';

const App = () => {
  return (
    <div>
      <Header />
    </div>
  );
};

export default App;
-----------------------------------------------------------------